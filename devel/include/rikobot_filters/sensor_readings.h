// Generated by gencpp from file rikobot_filters/sensor_readings.msg
// DO NOT EDIT!


#ifndef RIKOBOT_FILTERS_MESSAGE_SENSOR_READINGS_H
#define RIKOBOT_FILTERS_MESSAGE_SENSOR_READINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Accel.h>
#include <geometry_msgs/Vector3.h>

namespace rikobot_filters
{
template <class ContainerAllocator>
struct sensor_readings_
{
  typedef sensor_readings_<ContainerAllocator> Type;

  sensor_readings_()
    : imu_msg()
    , odom_msg()  {
    }
  sensor_readings_(const ContainerAllocator& _alloc)
    : imu_msg(_alloc)
    , odom_msg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _imu_msg_type;
  _imu_msg_type imu_msg;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _odom_msg_type;
  _odom_msg_type odom_msg;




  typedef boost::shared_ptr< ::rikobot_filters::sensor_readings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rikobot_filters::sensor_readings_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_readings_

typedef ::rikobot_filters::sensor_readings_<std::allocator<void> > sensor_readings;

typedef boost::shared_ptr< ::rikobot_filters::sensor_readings > sensor_readingsPtr;
typedef boost::shared_ptr< ::rikobot_filters::sensor_readings const> sensor_readingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rikobot_filters::sensor_readings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rikobot_filters::sensor_readings_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rikobot_filters

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'rikobot_filters': ['/home/afifi/Graduation_project/SLAM_and_navigation_using_ROS/src/rikobot_filters/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rikobot_filters::sensor_readings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rikobot_filters::sensor_readings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rikobot_filters::sensor_readings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97f12acf8e150b22ecdcf2d2e3b6aecb";
  }

  static const char* value(const ::rikobot_filters::sensor_readings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97f12acf8e150b22ULL;
  static const uint64_t static_value2 = 0xecdcf2d2e3b6aecbULL;
};

template<class ContainerAllocator>
struct DataType< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rikobot_filters/sensor_readings";
  }

  static const char* value(const ::rikobot_filters::sensor_readings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Accel imu_msg\n\
geometry_msgs/Vector3 odom_msg\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Accel\n\
# This expresses acceleration in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::rikobot_filters::sensor_readings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_msg);
      stream.next(m.odom_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_readings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rikobot_filters::sensor_readings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rikobot_filters::sensor_readings_<ContainerAllocator>& v)
  {
    s << indent << "imu_msg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_msg);
    s << indent << "odom_msg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.odom_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIKOBOT_FILTERS_MESSAGE_SENSOR_READINGS_H
